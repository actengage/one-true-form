/*
* ./Components/Grid.scss
*/

$grid-width: 100%;
$grid-gutter: 15px;
$grid-sm-breakpoint: 540px;
$grid-md-breakpoint: 720px;
$grid-lg-breakpoint: 960px;
$grid-xl-breakpoint: 1140px;

@mixin display-column-rules($target) {
    .d-#{$target}-block { display: block !important; }
    .d-#{$target}-inline-block { display: inline-block !important; }
    .d-#{$target}-inline { display: inline !important; }
    .d-#{$target}-none { display: none !important; }
}

@mixin display-spacing-rules($target:false) {
    @include display-spacing-rule('margin', $font-size-base / 2, false, $target);
    @include display-spacing-rule('padding', $font-size-base / 2, false, $target);

    @include display-spacing-rule('margin', $font-size-base / 2, 'xs', $target);
    @include display-spacing-rule('padding', $font-size-base / 2, 'xs', $target);

    @include display-spacing-rule('margin', $font-size-base, 'sm', $target);
    @include display-spacing-rule('padding', $font-size-base, 'sm', $target);

    @include display-spacing-rule('margin', $font-size-base * 1.5, 'md', $target);
    @include display-spacing-rule('padding', $font-size-base * 1.5, 'md', $target);

    @include display-spacing-rule('margin', $font-size-base * 2, 'lg', $target);
    @include display-spacing-rule('padding', $font-size-base * 2, 'lg', $target);

    @include display-spacing-rule('margin', $font-size-base * 3, 'xl', $target);
    @include display-spacing-rule('padding', $font-size-base * 3, 'xl', $target);
}

@mixin display-spacing-rule($attr, $padding, $size:false, $target:false) {
    @if(not $target and not $size) {
        .#{$attr} { #{$attr}: $padding; }
        .#{$attr}-top { #{$attr}-top: $padding; }
        .#{$attr}-bottom { #{$attr}-bottom: $padding; }
        .#{$attr}-left { #{$attr}-left: $padding; }
        .#{$attr}-right { #{$attr}-right: $padding; }
    }
    @else if(not $target and $size) {
        .#{$attr}-#{$size} { #{$attr}: $padding; }
        .#{$attr}-top-#{$size} { #{$attr}-top: $padding; }
        .#{$attr}-bottom-#{$size} { #{$attr}-bottom: $padding; }
        .#{$attr}-left-#{$size} { #{$attr}-left: $padding; }
        .#{$attr}-right-#{$size} { #{$attr}-right: $padding; }
    }
    @else if($target and not $size) {
        .#{$attr}-#{$target} { #{$attr}: $padding; }
        .#{$attr}-#{$target}-top { #{$attr}-top: $padding; }
        .#{$attr}-#{$target}-bottom { #{$attr}-bottom: $padding; }
        .#{$attr}-#{$target}-left { #{$attr}-left: $padding; }
        .#{$attr}-#{$target}-right { #{$attr}-right: $padding; }
    }
    @else if($target and $size) {
        .#{$attr}-#{$target}-#{$size} { #{$attr}: $padding; }
        .#{$attr}-#{$target}-top-#{$size} { #{$attr}-top: $padding; }
        .#{$attr}-#{$target}-bottom-#{$size} { #{$attr}-bottom: $padding; }
        .#{$attr}-#{$target}-left-#{$size} { #{$attr}-left: $padding; }
        .#{$attr}-#{$target}-right-#{$size} { #{$attr}-right: $padding; }
    }
}

@mixin columns($selector, $attr: 'width', $through: 12) {
    @function size($i) {
        @return ($grid-width / (12 / $i))
    }

    @for $i from 1 through $through {
      #{str-replace('$i', $i, $selector)} {
          @if($i < 12) {
              #{$attr}: size($i);
          }
          @else {
              #{$attr}: $grid-width;
          }
      }
    }
}

.container {
    padding-right: $grid-gutter;
    padding-left: $grid-gutter;
    margin-right: auto;
    margin-left: auto;

    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

.container-fluid {
    padding-right: $grid-gutter;
    padding-left: $grid-gutter;
    margin-right: auto;
    margin-left: auto;
}

@media (min-width: 768px) {
    .container {
        width: 750px;
    }
}

@media (min-width: 992px) {
    .container {
        width: 970px;
    }
}

@media (min-width: 1200px) {
    .container {
        width: 1170px;
    }
}

.row {
    //box-sizing: border-box;
    margin-left: -$grid-gutter;
    margin-right: -$grid-gutter;

    &.no-gutter {
      margin-left: 0;
      margin-right: 0; }

    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

.no-gutter [class^="col-"] {
    padding-left: 0;
}

[class^="col-"] {
    width: 100%;
    //box-sizing: border-box;
    position: relative;
    min-height: 1px;
    padding-right: $grid-gutter;
    padding-left: $grid-gutter;
    float: left;
}

@include columns('.col-xs-$i');
@include columns('.col-xs-push-$i', 'margin-left', 11);
@include columns('.col-xs-pull-$i', 'margin-right', 11);

.d-xs-none, .d-none { display: none !important; }
.d-xs-block, .d-block { display: block !important; }
.d-xs-inline-block, .d-inline-block { display: inline-block !important; }
.d-xs-inline, .d-inline { display: inline !important; }

@include display-spacing-rules();

@media only screen and (min-width: $grid-sm-breakpoint) {
    @include columns('.col-$i, .col-sm-$i');
    @include columns('.col-push-$i, .col-sm-push-$i', 'margin-left', 11);
    @include columns('.col-pull-$i, .col-sm-pull-$i', 'margin-right', 11);
    @include display-column-rules('sm');
    @include display-spacing-rules('sm');
}

@media only screen and (min-width: $grid-md-breakpoint) {
    @include columns('.col-md-$i');
    @include columns('.col-md-push-$i', 'margin-left', 11);
    @include columns('.col-md-pull-$i', 'margin-right', 11);
    @include display-column-rules('md');
    @include display-spacing-rules('md');
}

@media only screen and (min-width: $grid-lg-breakpoint) {
    @include columns('.col-lg-$i');
    @include columns('.col-lg-push-$i', 'margin-left', 11);
    @include columns('.col-lg-pull-$i', 'margin-right', 11);
    @include display-column-rules('lg');
    @include display-spacing-rules('lg');
}

@media only screen and (min-width: $grid-xl-breakpoint) {
    @include columns('.col-xl-$i');
    @include columns('.col-xl-push-$i', 'margin-left', 11);
    @include columns('.col-xl-pull-$i', 'margin-right', 11);
    @include display-column-rules('xl');
    @include display-spacing-rules('xl');
}
