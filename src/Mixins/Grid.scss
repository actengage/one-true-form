// ./Mixins/Grid.scss

@mixin display-column-rules($breakpoint:false) {
    @if($breakpoint) {
        .d-#{$breakpoint}-block { display: block !important; }
        .d-#{$breakpoint}-inline-block { display: inline-block !important; }
        .d-#{$breakpoint}-inline { display: inline !important; }
        .d-#{$breakpoint}-none { display: none !important; }

        .float-#{$breakpoint}-right { float: right; }
        .float-#{$breakpoint}-left { float: left; }
        .float-#{$breakpoint}-none { float: none; }
    }
    @else {
        .d-block { display: block !important; }
        .d-inline-block { display: inline-block !important; }
        .d-inline { display: inline !important; }
        .d-none { display: none !important; }

        .float-right { float: right !important; }
        .float-left { float: left !important; }
        .float-none { float: none !important; }
    }
}


@mixin display-spacing-property($property, $value, $side:false) {
    @if(not $side) {
        #{$property}: $value !important;
    }
    @else if($side == 'x') {
        #{$property}-left: $value !important;
        #{$property}-right: $value !important;
    }
    @else if($side == 'y') {
        #{$property}-top: $value !important;
        #{$property}-bottom: $value !important;
    }
    @else {
        #{$property}-#{$side}: $value !important;
    }
}

@mixin display-spacing-rule($size, $property, $value, $side:false, $breakpoint:false) {
    @if(not $side and not $breakpoint) {
        .#{str-slice($property, 0, 1)}-#{$size} {
            @include display-spacing-property($property, $value, $side);
        }
    }
    @else if($side and not $breakpoint) {
        .#{str-slice($property, 0, 1)}#{str-slice($side, 0, 1)}-#{$size} {
            @include display-spacing-property($property, $value, $side);
        }
    }
    @else if(not $side and $breakpoint) {
        .#{str-slice($property, 0, 1)}-#{$size}-#{$breakpoint} {
            @include display-spacing-property($property, $value, $side);
        }
    }
    @else {
        .#{str-slice($property, 0, 1)}#{str-slice($side, 0, 1)}-#{$size}-#{$breakpoint} {
            @include display-spacing-property($property, $value, $side);
        }
    }
}

@mixin display-spacing-rules($breakpoint:false) {
    $sizes: (
        0 ($spacer * 0),
        1 ($spacer * .25),
        2 ($spacer * .5),
        3 ($spacer * 1),
        4 ($spacer * 1.5),
        5 ($spacer * 3),
        auto auto
    );

    @each $property in (margin, padding) {
        @each $side in (false, top, bottom, left, right, x, y) {
            @each $size in $sizes {
                @include display-spacing-rule(nth($size, 1), $property, nth($size, 2), $side, $breakpoint);
            }
        }
    }
}

@mixin columns($selector, $attr: 'width', $through: 12) {
    @for $i from 1 through $through {
      #{str-replace('$i', $i, $selector)} {
          @if($i < 12) {
              #{$attr}: size($i);
          }
          @else {
              #{$attr}: $grid-width;
          }
      }
    }
}

@function size($i) {
    @return ($grid-width / (12 / $i))
}
