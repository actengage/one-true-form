// ./Mixins/Grid.scss

@mixin display-column-rules($target) {
    .d-#{$target}-block { display: block !important; }
    .d-#{$target}-inline-block { display: inline-block !important; }
    .d-#{$target}-inline { display: inline !important; }
    .d-#{$target}-none { display: none !important; }
}

@mixin display-spacing-rules($target:false) {
    @include display-spacing-rule('margin', $font-size-base / 2, false, $target);
    @include display-spacing-rule('padding', $font-size-base / 2, false, $target);

    @include display-spacing-rule('margin', $font-size-base / 2, 'xs', $target);
    @include display-spacing-rule('padding', $font-size-base / 2, 'xs', $target);

    @include display-spacing-rule('margin', $font-size-base, 'sm', $target);
    @include display-spacing-rule('padding', $font-size-base, 'sm', $target);

    @include display-spacing-rule('margin', $font-size-base * 1.5, 'md', $target);
    @include display-spacing-rule('padding', $font-size-base * 1.5, 'md', $target);

    @include display-spacing-rule('margin', $font-size-base * 2, 'lg', $target);
    @include display-spacing-rule('padding', $font-size-base * 2, 'lg', $target);

    @include display-spacing-rule('margin', $font-size-base * 3, 'xl', $target);
    @include display-spacing-rule('padding', $font-size-base * 3, 'xl', $target);
}

@mixin display-spacing-rule($attr, $padding, $size:false, $target:false) {
    @if(not $target and not $size) {
        .#{$attr} { #{$attr}: $padding; }
        .#{$attr}-top { #{$attr}-top: $padding; }
        .#{$attr}-bottom { #{$attr}-bottom: $padding; }
        .#{$attr}-left { #{$attr}-left: $padding; }
        .#{$attr}-right { #{$attr}-right: $padding; }
    }
    @else if(not $target and $size) {
        .#{$attr}-#{$size} { #{$attr}: $padding; }
        .#{$attr}-top-#{$size} { #{$attr}-top: $padding; }
        .#{$attr}-bottom-#{$size} { #{$attr}-bottom: $padding; }
        .#{$attr}-left-#{$size} { #{$attr}-left: $padding; }
        .#{$attr}-right-#{$size} { #{$attr}-right: $padding; }
    }
    @else if($target and not $size) {
        .#{$attr}-#{$target} { #{$attr}: $padding; }
        .#{$attr}-#{$target}-top { #{$attr}-top: $padding; }
        .#{$attr}-#{$target}-bottom { #{$attr}-bottom: $padding; }
        .#{$attr}-#{$target}-left { #{$attr}-left: $padding; }
        .#{$attr}-#{$target}-right { #{$attr}-right: $padding; }
    }
    @else if($target and $size) {
        .#{$attr}-#{$target}-#{$size} { #{$attr}: $padding; }
        .#{$attr}-#{$target}-top-#{$size} { #{$attr}-top: $padding; }
        .#{$attr}-#{$target}-bottom-#{$size} { #{$attr}-bottom: $padding; }
        .#{$attr}-#{$target}-left-#{$size} { #{$attr}-left: $padding; }
        .#{$attr}-#{$target}-right-#{$size} { #{$attr}-right: $padding; }
    }
}

@mixin columns($selector, $attr: 'width', $through: 12) {
    @function size($i) {
        @return ($grid-width / (12 / $i))
    }

    @for $i from 1 through $through {
      #{str-replace('$i', $i, $selector)} {
          @if($i < 12) {
              #{$attr}: size($i);
          }
          @else {
              #{$attr}: $grid-width;
          }
      }
    }
}
